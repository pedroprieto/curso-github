* Introducción a GitHub
[[./imagenes/Logotipo_ME_FP_GV_FSE.png]]

** Videotutoriales
- [[https://youtu.be/SJf4iTkMNPo][Sesión 3.1]]
- [[https://youtu.be/GMH6hN8FKSU][Sesión 3.2]]
- [[https://youtu.be/5EJjRqtpqOM][Sesión 3.3]]
- [[https://youtu.be/A5PKw10PmNU][Sesión 3.4]]
- [[https://youtu.be/yLHi7bOCOMo][Sesión 3.5]]

** Índice
    - Breve descripción y posibilidades en la gestión de tareas del alumnado
    - Alternativas: GitLab, BitBucket,...
    - Cuentas
    - Configuración de la cuenta
    - Manejo básico de la plataforma
    - Repositorios: manejo y ajustes
    - Red social: comentarios, seguidores, etc.
    - Issues y Proyectos
    - Colaboración: Forks y Pull Requests
    - Organizaciones

** Referencias
- [[https://help.github.com/][Ayuda de GitHub]]
- [[https://help.github.com/articles/basic-writing-and-formatting-syntax/][Sintaxis de MarkDown]]
- [[https://help.github.com/articles/permission-levels-for-a-user-account-repository/#collaborator-access-on-a-repository-owned-by-a-user-account][Permisos de los colaboradores en un repositorio]]
- [[https://education.github.com/discount_requests/new][Solicitud de descuentos para uso educativo]]
- [[https://help.github.com/articles/closing-issues-using-keywords/][Cerrar issues a través de mensajes en el commit]]
- [[https://docs.github.com/es/github/authenticating-to-github/creating-a-personal-access-token][Autenticación en GitHub mediante tokens]]
- [[https://docs.github.com/es/get-started/getting-started-with-git/caching-your-github-credentials-in-git][Gestión de credenciales de GitHub]]
- [[https://docs.github.com/es/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax][Escritura básica en GitHub]]
- [[https://docs.github.com/es/get-started/writing-on-github/working-with-advanced-formatting/creating-a-permanent-link-to-a-code-snippet][Enlaces a fragmentos de código]]
- [[https://docs.github.com/es/issues][Issues en GitHub]]
- [[https://docs.github.com/es/issues/using-labels-and-milestones-to-track-work/about-milestones][Hitos (milestones) en GitHub]]

** Contenidos
*** Presentación
 - [[https://pedroprieto.github.io/curso-github/presentaciones/sesion-3-presentacion.html][Presentación]]
   
*** Tareas basadas en repositorios para trabajo en clase
GitHub ofrece funcionalidades muy interesantes para trabajar con prácticas relacionadas con código o archivos de texto. Comparado con la gestión tradicional de tareas (creación de un fichero comprimido y subida de dicho fichero a una plataforma de tipo Moodle o entrega por correo) tenemos las siguientes *ventajas*:
- Posibilidad de ver el código en el explorador web sin necesidad de descargarlo
- Podemos crear conversaciones para realizar comentarios sobre la tarea
- Posibilidad de hacer comentarios directamente sobre el código, haciendo referencia a líneas concretas, otros comentarios, commits, archivos, etc.
- Opción de realizar tests automáticos para corrección de tareas o autoevaluación del alumnado
- Colaboración entre distintas personas para tareas en grupo. Visibilización de las aportaciones de cada persona al trabajo común.

*** Escribir en GitHub
GitHub permite añadir comentarios en varios sitios: por ejemplo, en Pull Requests, Issues y Commits. Los comentarios pueden [[https://docs.github.com/es/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax][formatearse mediante una sintaxis basada en Markdown]].

Especialmente útil es la sintaxis para resaltar código. Si es una palabra concreta, puede resaltarse mediante el *acento grave*: ~`~. Así, es posible resaltar una palabra mediante ~`código`~.

Para resaltar fragmentos de código se utilizan delimitadores de bloque que consisten en *tres acentos graves seguidos*. Opcionalmente es posible indicar el lenguaje del código a continuación. Por ejemplo, para resaltar código PHP se utilizaría la sintaxis siguiente:
#+begin_src markdown
```php
# Código PHP
```
#+end_src

*** Enlaces a fragmentos de código
En ocasiones es interesante hacer [[https://docs.github.com/es/get-started/writing-on-github/working-with-advanced-formatting/creating-a-permanent-link-to-a-code-snippet][referencia a un fragmento de código en un comentario]] para aclarar una duda o identificar un error.

*** Issues y milestones
Los Issues (propuestas) permiten crear *notas* para, por ejemplo:
- Identificar fallos en el código y hacer su seguimiento
- Proponer mejoras o nuevas características
- Hacer un seguimiento de las tareas que hay que realizar en el repositorio

En el texto de los Issues se pueden hacer [[https://docs.github.com/es/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax#mentioning-people-and-teams][menciones]] a otros usuarios de GitHub, hacer referencia a [[https://docs.github.com/es/get-started/writing-on-github/working-with-advanced-formatting/creating-a-permanent-link-to-a-code-snippet][líneas de código]] o crear [[https://docs.github.com/es/issues/tracking-your-work-with-issues/about-task-lists][listas de tareas]] que pueden marcarse como completadas. También pueden [[https://docs.github.com/es/get-started/writing-on-github/working-with-advanced-formatting/creating-and-highlighting-code-blocks][adjuntarse fragmentos de código]].

Los Issues pueden [[https://docs.github.com/es/issues/tracking-your-work-with-issues/quickstart#assigning-the-issue][asignarse a personas responsables]] u organizarse en [[https://docs.github.com/es/issues/tracking-your-work-with-issues/quickstart#adding-milestones][hitos]] (milestones) para agruparlos y hacer un seguimiento de los mismos.

Por último, es posible *cerrar los issues* a través de *palabras clave* en el texto de los *commits*. De esta manera [[https://docs.github.com/es/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue][se asociará el commit con el issue resuelto o cerrado]].

*** Autenticación mediante tokens
    GitHub ofrece la posibilidad de utilizar *tokens* en lugar de la contraseña de la cuenta para interactuar con su servicio a través de *línea de comandos*, *gestor gráfico* o *API*. Los tokens ofrecen una alternativa a la contraseña de la cuenta y proporcionan las siguientes ventajas:
    - Permiten *especificar permisos de acceso* en lugar de proporcionar acceso completo
    - Pueden generarse tantos como se necesiten para proporcionar distintos perfiles de acceso

    En este enlace tienes toda la [[https://docs.github.com/es/github/authenticating-to-github/creating-a-personal-access-token][información para crear un token]] en tu cuenta. Una vez creado, *solo se podrá visualizar una vez*, por lo que deberá copiarse para poder ser utilizado. Recuerda que el token puede utilizarse para *sustituir a la contraseña* en el acceso a GitHub desde *línea de comando* o mediante un *gestor gráfico*.

*** Colaboración
GitHub ofrece *dos* mecanismos básicos para la *colaboración* en un determinado repositorio:
- *Forks y Pull Requests* - Mecanismo utilizado por defecto. Permite que personas que no tienen acceso de escritura al repositorio puedan hacer una copia del mismo en su propia cuenta y enviar los cambios para que la persona dueña del repositorio original decida si quiere o no integrarlos. Muy útil en proyectos de Código Abierto, donde las *personas colaboradoras no se conocen entre sí*.
- *Permisos de colaboradores* - Se pueden agregar *colaboradores* a un repositorio para que puedan realizar cambios. Este método es útil si tenemos claro que determinadas personas van a colaborar en el repositorio. Este método de trabajo puede extenderse mediante el uso de *organizaciones*, que permiten crear equipos de personas y asignarles permisos para cada uno de los repositorios de la organización.

** Tareas
*** 1 - Creación de cuenta en GitHub
 1) Crea una cuenta en GitHub
 2) Añade tu dirección de correo de educación
 3) Solicita un descuento para uso educativo (ver enlace en apartado de Referencias)

*** 2 - Trabajo con repositorios, issues, forks y pull requests
 1) Haz un /fork/ del repositorio localizado en la siguiente url: [[https://github.com/curso-github-cefire/sesion3-practica]]. A partir de este momento todas las tareas que se indican se deben realizar *en tu repositorio* (el que has clonado mediante el /fork/).
    1) Realiza un primer commit para poner tu nombre y apellidos en el fichero ~README.md~
    2) Crea 3 issues con los siguientes títulos. Si no ves la pestaña de /issues/, actívala desde los ajustes (/settings/) del repositorio.
       - Añadir 3 libros
       - Añadir 3 películas
       - Añadir 3 discos
    3) Crea una ~milestone~ denominada ~Tareas sesión 3-2~ que contenga los 3 issues creados.
    4) Modifica los ficheros correspondientes y realiza 3 commits para realizar cada una de las tareas que se indican en los issues. El mensaje del commit debe hacer que se cierren los issues correspondientes de manera automática.
    5) Haz una captura de pantalla de los comandos que has utilizado para hacer los commits y subir los cambios a GitHub.
    6) Incluye las capturas de pantalla en el repositorio dentro de la carpeta ~capturas~. Añádelas también al repositorio de manera que queden guardadas en tu repositorio en GitHub.
    7) Realiza una ~pull request~ indicando en el mensaje que has completado la tarea.

*** 3 - Trabajo con organizaciones
 1) Crea una organización en tu cuenta con el nombre ~organizacion-sesion-3-tu-nombre-y-apellidos~.
 2) Crea un repositorio dentro de la organización denominado ~sesion3-repo-organizacion~. Dicho repositorio debe contener:
    - Un archivo ~README~ con tu nombre y apellidos.
    - Un archivo ~.gitignore~ para el lenguaje ~Java~.
    - Un archivo de licencia de tipo ~MIT~.
 3) Crea un equipo dentro de la organización denominado ~equipo1~.
 4) Da permisos de escritura a ~equipo1~ en el repositorio creado.
 5) Invítame a formar parte de la organización y a formar parte del equipo ~equipo1~. Mi usuario de GitHub es ~pedroprieto~.

** Entrega de la tarea
No hay que subir ningún archivo en la tarea de la plataforma Moodle del Cefire.
